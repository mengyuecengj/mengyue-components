import{_ as p,C as s,c as i,o as r,af as e,G as a,w as d,j as c}from"./chunks/framework.Dg2MLihl.js";const v=JSON.parse('{"title":"Skeleton","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/skeleton.md","filePath":"guide/mdGuide/skeleton.md"}'),h={name:"guide/mdGuide/skeleton.md"};function u(o,t,b,_,m,k){const n=s("MYSkeleton"),l=s("MYSkeleton-item");return r(),i("div",null,[t[1]||(t[1]=e(`<h1 id="skeleton" tabindex="-1">Skeleton <a class="header-anchor" href="#skeleton" aria-label="Permalink to &quot;Skeleton&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>Skeleton 骨架屏，用于在数据加载时展示占位内容，提升用户体验。mengyue-components 进行了封装并进行了 vitest 测试。<br> 可以使用 <code>&lt;MYSkeleton&gt;&lt;/MYSkeleton&gt;</code> 或者 <code>&lt;MYSkeleton /&gt;</code> 和<code>&lt;MYSkeleton-item&gt;&lt;/MYSkeleton-item&gt;</code>或者<code>&lt;MYSkeleton-item /&gt;</code>来实现一个骨架屏。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><h3 id="默认多行文本骨架屏" tabindex="-1">默认多行文本骨架屏 <a class="header-anchor" href="#默认多行文本骨架屏" aria-label="Permalink to &quot;默认多行文本骨架屏&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSkeleton /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,6)),a(n),t[2]||(t[2]=e(`<h3 id="自定义圆形骨架屏" tabindex="-1">自定义圆形骨架屏 <a class="header-anchor" href="#自定义圆形骨架屏" aria-label="Permalink to &quot;自定义圆形骨架屏&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSkeleton :animated=&quot;true&quot;&gt;&lt;/MYSkeleton&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),a(n,{style:{"--el-skeleton-circle-size":"100px"}},{template:d(()=>[a(l,{variant:"circle",style:{width:"var(--el-skeleton-circle-size)",height:"var(--el-skeleton-circle-size)"}})]),_:1}),t[3]||(t[3]=e(`<h3 id="动态加载" tabindex="-1">动态加载 <a class="header-anchor" href="#动态加载" aria-label="Permalink to &quot;动态加载&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSkeleton :loading=&quot;isLoading&quot;&gt;</span></span>
<span class="line"><span>  &lt;template #default&gt;</span></span>
<span class="line"><span>    &lt;div&gt;实际内容&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/template&gt;</span></span>
<span class="line"><span>&lt;/MYSkeleton&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),a(n,{loading:o.isLoading},{default:d(()=>t[0]||(t[0]=[c("div",null,"实际内容",-1)])),_:1},8,["loading"]),t[4]||(t[4]=e(`<h3 id="随机宽度" tabindex="-1">随机宽度 <a class="header-anchor" href="#随机宽度" aria-label="Permalink to &quot;随机宽度&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSkeleton :random-width=&quot;true&quot; :count=&quot;5&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),a(n,{"random-width":!0,count:5}),t[5]||(t[5]=e(`<h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="skeleton-props" tabindex="-1">skeleton Props <a class="header-anchor" href="#skeleton-props" aria-label="Permalink to &quot;skeleton Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>loading</td><td>是否显示骨架屏</td><td>boolean</td><td>—</td><td><code>true</code></td></tr><tr><td>animated</td><td>是否显示动画效果</td><td>boolean</td><td>—</td><td><code>true</code></td></tr><tr><td>count</td><td>占位行数</td><td>number</td><td>—</td><td><code>3</code></td></tr><tr><td>randomWidth</td><td>占位宽度是否随机</td><td>boolean | string</td><td>—</td><td><code>false</code></td></tr><tr><td>throttle</td><td>显示延迟时间（毫秒）</td><td>number</td><td>—</td><td><code>0</code></td></tr><tr><td>theme</td><td>主题样式</td><td>string</td><td><code>&#39;light&#39;</code> | <code>&#39;dark&#39;</code></td><td><code>&#39;light&#39;</code></td></tr></tbody></table><h3 id="skeletonitem-props" tabindex="-1">skeletonItem Props <a class="header-anchor" href="#skeletonitem-props" aria-label="Permalink to &quot;skeletonItem Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>variant</td><td>展示样式</td><td>string</td><td>—</td><td><code>text</code></td></tr><tr><td>width</td><td>指定宽度</td><td>boolean/number</td><td>—</td><td><code>100%</code></td></tr><tr><td>height</td><td>指定高度</td><td>boolean/number</td><td>—</td><td><code>16</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>interface SkeletonProps {</span></span>
<span class="line"><span>  loading?: boolean;</span></span>
<span class="line"><span>  animated?: boolean;</span></span>
<span class="line"><span>  count?: number;</span></span>
<span class="line"><span>  randomWidth?: boolean | string;</span></span>
<span class="line"><span>  throttle?: number;</span></span>
<span class="line"><span>  theme?: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>interface SkeletonItemProps {</span></span>
<span class="line"><span>  variant?: string;</span></span>
<span class="line"><span>  width?: boolean | number;</span></span>
<span class="line"><span>  height?: boolean | number;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre></div>`,7))])}const S=p(h,[["render",u]]);export{v as __pageData,S as default};
