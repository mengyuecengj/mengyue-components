import{_ as l,C as o,c as p,o as i,af as d,G as t,w as e,a as n}from"./chunks/framework.B2AMlDzG.js";const f=JSON.parse('{"title":"A","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/a.md","filePath":"guide/mdGuide/a.md"}'),r={name:"guide/mdGuide/a.md"};function c(u,a,g,b,m,_){const s=o("MYa");return i(),p("div",null,[a[8]||(a[8]=d(`<h1 id="a" tabindex="-1">A <a class="header-anchor" href="#a" aria-label="Permalink to &quot;A&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>a 链接组件，用于显示超链接内容，支持多种样式和交互行为。mengyue-components 进行了封装并进行了 vitest 测试。<br> 可以使用 <code>&lt;MYa&gt;&lt;/MYa&gt;</code> 或者 <code>&lt;MYa /&gt;</code> 来实现一个链接组件。</p><h2 id="关于颜色的使用" tabindex="-1">关于颜色的使用 <a class="header-anchor" href="#关于颜色的使用" aria-label="Permalink to &quot;关于颜色的使用&quot;">​</a></h2><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p>在 <code>MYA</code> 中使用 <code>type</code> 可以实现链接的颜色定义，这些颜色是 mengyue-components 提供的基本颜色定义。 例如使用 type 完成下面的颜色定义，如果不写 type 默认是蓝色链接：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa type=&quot;primary&quot;&gt;primary 类型&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa type=&quot;success&quot;&gt;success 类型&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa type=&quot;warning&quot;&gt;warning 类型&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa type=&quot;danger&quot;&gt;danger 类型&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa type=&quot;info&quot;&gt;info 类型&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa&gt;默认类型&lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div><h3 id="自定义颜色" tabindex="-1">自定义颜色 <a class="header-anchor" href="#自定义颜色" aria-label="Permalink to &quot;自定义颜色&quot;">​</a></h3><p>如果默认颜色不满足需求，还可以自定义颜色，使用 <code>color</code> 属性自定义链接颜色。 例如这里使用红色链接：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa color=&quot;#ff0000&quot;&gt;自定义红色链接&lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,10)),t(s,{color:"#ff0000"},{default:e(()=>[...a[0]||(a[0]=[n("自定义红色链接",-1)])]),_:1}),a[9]||(a[9]=d(`<p>使用单词来自定义链接颜色</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa color=&quot;red&quot;&gt;自定义红色链接&lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),t(s,{color:"red"},{default:e(()=>[...a[1]||(a[1]=[n("自定义红色链接",-1)])]),_:1}),a[10]||(a[10]=d(`<h2 id="关于交互行为" tabindex="-1">关于交互行为 <a class="header-anchor" href="#关于交互行为" aria-label="Permalink to &quot;关于交互行为&quot;">​</a></h2><h3 id="disabled" tabindex="-1">disabled <a class="header-anchor" href="#disabled" aria-label="Permalink to &quot;disabled&quot;">​</a></h3><p>使用 <code>disabled</code> 属性可以禁用链接。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa disabled&gt;禁用链接&lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,4)),t(s,{disabled:""},{default:e(()=>[...a[2]||(a[2]=[n("禁用链接",-1)])]),_:1}),a[11]||(a[11]=d(`<h2 id="关于尺寸" tabindex="-1">关于尺寸 <a class="header-anchor" href="#关于尺寸" aria-label="Permalink to &quot;关于尺寸&quot;">​</a></h2><h3 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size&quot;">​</a></h3><p>使用 <code>size</code> 属性可以调整链接大小。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa size=&quot;large&quot;&gt;large 尺寸&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa size=&quot;medium&quot;&gt;medium 尺寸&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa size=&quot;small&quot;&gt;small 尺寸&lt;/MYa&gt;</span></span>
<span class="line"><span>&lt;MYa size=&quot;mini&quot;&gt;mini 尺寸&lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,4)),t(s,{size:"large"},{default:e(()=>[...a[3]||(a[3]=[n("large 尺寸",-1)])]),_:1}),t(s,{size:"medium"},{default:e(()=>[...a[4]||(a[4]=[n("medium 尺寸",-1)])]),_:1}),t(s,{size:"small"},{default:e(()=>[...a[5]||(a[5]=[n("small 尺寸",-1)])]),_:1}),t(s,{size:"mini"},{default:e(()=>[...a[6]||(a[6]=[n("mini 尺寸",-1)])]),_:1}),a[12]||(a[12]=d(`<p>组合使用</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYa size=&quot;large&quot; color=&quot;#ff0000&quot; class=&quot;b&quot;&gt;</span></span>
<span class="line"><span>                组合1: primary + large + 红色 + primary下划线</span></span>
<span class="line"><span>            &lt;/MYa&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),t(s,{size:"large",color:"#ff0000",class:"b"},{default:e(()=>[...a[7]||(a[7]=[n(" 组合1: primary + large + 红色 + primary下划线 ",-1)])]),_:1}),a[13]||(a[13]=d(`<p><strong>注意:</strong> 如果使用了<code>type</code>属性，请不要在组件上定义<code>color</code>属性，不然<code>color</code>会覆盖<code>type</code>，最终生效<code>color</code>的配置。</p><h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>链接类型</td><td>string</td><td><code>primary</code>/<code>success</code>/<code>warning</code>/<code>danger</code>/<code>info</code></td><td>—</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>支持px/rem/vh/vw</td><td>—</td></tr><tr><td>disabled</td><td>禁用</td><td>boolean</td><td>—</td><td>—</td></tr><tr><td>underline</td><td>下划线</td><td>boolean</td><td>—</td><td>—</td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td><code>small</code>/<code>medium</code>/<code>large</code>/<code>mini</code>/自定义</td><td>—</td></tr><tr><td>tag</td><td>渲染标签</td><td>string</td><td>支持所有 HTML 标签</td><td><code>a</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>interface AProps {</span></span>
<span class="line"><span>  type?: string;</span></span>
<span class="line"><span>  color?: string;</span></span>
<span class="line"><span>  disabled?: boolean;</span></span>
<span class="line"><span>  underline?: boolean;</span></span>
<span class="line"><span>  size?: string | number;</span></span>
<span class="line"><span>  tag?: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre></div>`,6))])}const q=l(r,[["render",c]]);export{f as __pageData,q as default};
