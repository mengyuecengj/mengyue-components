import{_ as l,C as r,c as d,o as p,af as t,G as a,w as e,a as n}from"./chunks/framework.B2AMlDzG.js";const _=JSON.parse('{"title":"Border","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/border.md","filePath":"guide/mdGuide/border.md"}'),c={name:"guide/mdGuide/border.md"};function i(C,o,u,b,y,h){const s=r("MYBorder");return p(),d("div",null,[o[10]||(o[10]=t(`<h1 id="border" tabindex="-1">Border <a class="header-anchor" href="#border" aria-label="Permalink to &quot;Border&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>Border 组件用于为元素添加边框样式，支持多种边框风格、颜色和方向。mengyue-components 对其进行了封装并完成了vitest测试，并提供了丰富的配置选项。<br> 可以使用<code>&lt;MYBorder&gt;&lt;/MYBorder&gt;</code>或者<code>&lt;MYBorder /&gt;</code>可以实现边框的配置。</p><h2 id="关于基本边框" tabindex="-1">关于基本边框 <a class="header-anchor" href="#关于基本边框" aria-label="Permalink to &quot;关于基本边框&quot;">​</a></h2><h3 id="borderstyle" tabindex="-1">borderStyle <a class="header-anchor" href="#borderstyle" aria-label="Permalink to &quot;borderStyle&quot;">​</a></h3><p>使用 <code>borderStyle</code> 定义边框的基本样式。<br> 默认为黑色，此处使用<code>borderColor</code>配了个清晰的颜色。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder borderStyle=&quot;solid&quot;&gt;边框为solid&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderStyle=&quot;dashed&quot;&gt;边框为dashed&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderStyle=&quot;dotted&quot;&gt;边框为dotted&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div><p>运行后的效果依次如下</p>`,8)),a(s,{borderStyle:"solid",borderColor:"#2c2"}),a(s,{borderStyle:"dashed",borderColor:"#2c2"}),a(s,{borderStyle:"dotted",borderColor:"#2c2"}),o[11]||(o[11]=t(`<h3 id="borderwidth" tabindex="-1">borderWidth <a class="header-anchor" href="#borderwidth" aria-label="Permalink to &quot;borderWidth&quot;">​</a></h3><p>使用 <code>borderWidth</code> 定义边框的厚度，默认为 <code>1px</code>。此处使用<code>borderColor</code>配了个清晰的颜色。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder borderWidth=&quot;2px&quot;&gt;厚度为2px&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderWidth=&quot;4vh&quot;&gt;厚度为4px&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderWidth=&quot;6rem&quot;&gt;厚度为6rem&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderWidth=&quot;8vw&quot;&gt;厚度为8vw&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),a(s,{borderWidth:"2px",borderColor:"#2c2"}),a(s,{borderWidth:"4vh",borderColor:"#2c2"}),a(s,{borderWidth:"6rem",borderColor:"#2c2"}),a(s,{borderWidth:"8vw",borderColor:"#2c2"}),o[12]||(o[12]=t(`<h3 id="bordercolor" tabindex="-1">borderColor <a class="header-anchor" href="#bordercolor" aria-label="Permalink to &quot;borderColor&quot;">​</a></h3><p>使用 <code>borderColor</code> 定义边框的颜色。默认值为黑色，此处使用<code>borderStyle</code>配了<code>borderStyle=&quot;dashed&quot;</code>。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder borderColor=&quot;#ff0000&quot;&gt;红色边框&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderColor=&quot;#409EFF&quot;&gt;蓝色边框&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),a(s,{borderColor:"#ff0000"}),a(s,{borderColor:"#409EFF"}),o[13]||(o[13]=t(`<p>当然也支持下面这种方式来自定义文字颜色</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder borderColor=&quot;red&quot;&gt;红色边框&lt;/MYBorder&gt;</span></span>
<span class="line"><span>&lt;MYBorder borderColor=&quot;blue&quot;&gt;蓝色边框&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),a(s,{borderColor:"red"}),a(s,{borderColor:"blue"}),o[14]||(o[14]=t(`<h3 id="边框方向" tabindex="-1">边框方向 <a class="header-anchor" href="#边框方向" aria-label="Permalink to &quot;边框方向&quot;">​</a></h3><p>可以为边框的每个方向单独设置颜色。当然也可以单独设置一个方向的颜色，单独设置后，边框默认的颜色会变成白色。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> topColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bottomColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">blue</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> leftColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">green</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> rightColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">yellow</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    这是一个带有不同方向颜色的边框</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{topColor:"red",bottomColor:"blue",leftColor:"green",rightColor:"yellow"},{default:e(()=>[...o[0]||(o[0]=[n("上下左右分别为红色和蓝色绿色黄色",-1)])]),_:1}),o[15]||(o[15]=t(`<h2 id="其他样式" tabindex="-1">其他样式 <a class="header-anchor" href="#其他样式" aria-label="Permalink to &quot;其他样式&quot;">​</a></h2><h3 id="center" tabindex="-1">center <a class="header-anchor" href="#center" aria-label="Permalink to &quot;center&quot;">​</a></h3><p>使用 <code>center</code> 将边框中的内容居中。此处使用<code>borderColor</code>配了个清晰的颜色。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> center</span><span style="color:#8FBCBB;"> borderColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#2c2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">居中的文字</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,4)),a(s,{center:"",borderColor:"#2c2"},{default:e(()=>[...o[1]||(o[1]=[n("居中的文字",-1)])]),_:1}),o[16]||(o[16]=t(`<h3 id="round" tabindex="-1">round <a class="header-anchor" href="#round" aria-label="Permalink to &quot;round&quot;">​</a></h3><p>使用 <code>round</code> 属性为边框添加圆角。此处使用<code>borderColor</code>配了个清晰的颜色。为了效果更直观这里使用了<code>paddingText</code>移动了文本的位置。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> round</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">这是一个圆角边框</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{round:"",borderColor:"#2c2",paddingText:"10px"},{default:e(()=>[...o[2]||(o[2]=[n("这是一个圆角边框",-1)])]),_:1}),o[17]||(o[17]=t(`<h3 id="circle" tabindex="-1">circle <a class="header-anchor" href="#circle" aria-label="Permalink to &quot;circle&quot;">​</a></h3><p>使用 <code>circle</code> 属性将边框变为圆形。此处使用<code>borderColor</code>配了个清晰的颜色。为了效果更直观这里使用了<code>paddingText</code>移动了文本的位置。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> circle</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">这是一个圆形边框</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{circle:"",borderColor:"#2c2",paddingText:"10px"},{default:e(()=>[...o[3]||(o[3]=[n("这是一个圆形边框",-1)])]),_:1}),o[18]||(o[18]=t(`<h3 id="colorbg" tabindex="-1">colorBg <a class="header-anchor" href="#colorbg" aria-label="Permalink to &quot;colorBg&quot;">​</a></h3><p>使用 <code>colorBg</code> 设置边框内部的背景色。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> colorBg</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#2c2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">这是一个带有背景色的边框</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{colorBg:"#2c2"},{default:e(()=>[...o[4]||(o[4]=[n("这是一个带有背景色的边框",-1)])]),_:1}),o[19]||(o[19]=t(`<h3 id="textcolor" tabindex="-1">textColor <a class="header-anchor" href="#textcolor" aria-label="Permalink to &quot;textColor&quot;">​</a></h3><p>使用 <code>textColor</code> 设置边框内文本的颜色。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> textColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">这是一个红色文本的边框</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{textColor:"red"},{default:e(()=>[...o[5]||(o[5]=[n("这是一个红色文本的边框",-1)])]),_:1}),o[20]||(o[20]=t(`<h3 id="boxshadow" tabindex="-1">boxShadow <a class="header-anchor" href="#boxshadow" aria-label="Permalink to &quot;boxShadow&quot;">​</a></h3><p>使用 <code>boxShadow</code> 为边框添加阴影效果。他的使用方式和原生css的box-shadow属性用法一致。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> boxShadow</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">10px 2px 8px red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">这是一个带有阴影的边框</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{boxShadow:"10px 2px 8px red"},{default:e(()=>[...o[6]||(o[6]=[n("这是一个带有阴影的边框",-1)])]),_:1}),o[21]||(o[21]=t(`<h3 id="自定义宽高" tabindex="-1">自定义宽高 <a class="header-anchor" href="#自定义宽高" aria-label="Permalink to &quot;自定义宽高&quot;">​</a></h3><p>使用<code>width</code>和<code>height</code>属性进行宽高的设置。为了效果更直观这里使用了<code>paddingText</code>和<code>borderColor</code>移动了文本的位置和设置颜色。这个宽和高也可以单独使用</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder width=&quot;300px&quot; height=&quot;100px&quot;&gt;高100px宽300px&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),a(s,{width:"300px",height:"100px",borderColor:"#2c2",paddingText:"20px"},{default:e(()=>[...o[7]||(o[7]=[n("高100px宽300px",-1)])]),_:1}),o[22]||(o[22]=t(`<h3 id="paddingtext" tabindex="-1">paddingText <a class="header-anchor" href="#paddingtext" aria-label="Permalink to &quot;paddingText&quot;">​</a></h3><p>使用<code>paddingText</code>设置边框内容与边框之间的距离，其效果相当于原生css的<code>padding</code>属性。也与css原生的padding使用方法是一致的。<br> 为了效果更直观这里使用了<code>borderColor</code>设置了清晰的颜色。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#8FBCBB;"> width</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">300px</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> height</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">100px</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> paddingText</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">100px</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> borderColor</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#2c2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">paddingText为100px</span><span style="color:#81A1C1;">&lt;/</span><span style="color:#D8DEE9;">MYBorder</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,3)),a(s,{width:"300px",height:"100px",paddingText:"100px",borderColor:"#2c2"},{default:e(()=>[...o[8]||(o[8]=[n("paddingText为100px",-1)])]),_:1}),o[23]||(o[23]=t(`<p>最后，下面为多种进行组合使用：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYBorder </span></span>
<span class="line"><span>    round</span></span>
<span class="line"><span>    topColor=&quot;red&quot;</span></span>
<span class="line"><span>    bottomColor=&quot;blue&quot;</span></span>
<span class="line"><span>    leftColor=&quot;green&quot;</span></span>
<span class="line"><span>    rightColor=&quot;yellow&quot;</span></span>
<span class="line"><span>    width=&quot;300px&quot;</span></span>
<span class="line"><span>    height=&quot;100px&quot;</span></span>
<span class="line"><span>    textColor=&quot;#ff00ff&quot;</span></span>
<span class="line"><span>    paddingText=&quot;100px&quot;</span></span>
<span class="line"><span>    colorBg=&quot;#2c2&quot;</span></span>
<span class="line"><span>    boxShadow=&quot;10px 2px 8px red&quot;</span></span>
<span class="line"><span>&gt;组合使用&lt;/MYBorder&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),a(s,{round:"",topColor:"red",bottomColor:"blue",leftColor:"green",rightColor:"yellow",width:"300px",height:"100px",textColor:"#ff00ff",paddingText:"100px",colorBg:"#2c2",boxShadow:"10px 2px 8px red"},{default:e(()=>[...o[9]||(o[9]=[n("组合使用",-1)])]),_:1}),o[24]||(o[24]=t(`<p><strong>注意: </strong><br> 如果使用了边框方向设置了颜色,那么<code>borderStyle</code>和<code>borderWidth</code>会被覆盖，使borderStyle不再生效。 <br><code>borderColor</code>和边框方向的颜色值同时设置了，那么边框方向会覆盖<code>borderColor</code>设置的颜色。所以它们指南同时使用一种样式。 <br> 如果设置了<code>cricle</code>，<code>round</code>将不会生效，<code>cricle</code>和<code>round</code>只能同时使用一种样式。 <br></p><h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>borderStyle</td><td>边框样式</td><td>string</td><td><code>solid</code>/<code>dashed</code>/<code>dotted</code>/<code>double</code></td><td><code>solid</code></td></tr><tr><td>borderWidth</td><td>边框厚度</td><td>string</td><td>支持px/rem/vh/vw</td><td><code>1px</code></td></tr><tr><td>borderColor</td><td>边框颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>topColor</td><td>上边框颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>bottomColor</td><td>下边框颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>leftColor</td><td>左边框颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>rightColor</td><td>右边框颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>round</td><td>是否为圆角</td><td>boolean</td><td>—</td><td><code>false</code></td></tr><tr><td>circle</td><td>是否为圆形</td><td>boolean</td><td>—</td><td><code>false</code></td></tr><tr><td>colorBg</td><td>背景色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>textColor</td><td>文本颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>boxShadow</td><td>阴影效果</td><td>string</td><td>支持所有CSS阴影格式</td><td>—</td></tr><tr><td>width</td><td>边框宽度</td><td>string</td><td>支持px/rem/vh/vw</td><td>—</td></tr><tr><td>height</td><td>边框高度</td><td>string</td><td>支持px/rem/vh/vw</td><td>—</td></tr><tr><td>paddingText</td><td>内容与边框间距</td><td>string</td><td>支持px/rem/vh/vw</td><td>—</td></tr><tr><td>tag</td><td>渲染标签</td><td>string</td><td>支持所有 HTML 标签</td><td><code>div</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>interface BorderProps {</span></span>
<span class="line"><span>  borderStyle?: &#39;solid&#39; | &#39;dashed&#39; | &#39;dotted&#39; | &#39;double&#39;;</span></span>
<span class="line"><span>  borderWidth?: string;</span></span>
<span class="line"><span>  borderColor?: string;</span></span>
<span class="line"><span>  topColor?: string;</span></span>
<span class="line"><span>  bottomColor?: string;</span></span>
<span class="line"><span>  leftColor?: string;</span></span>
<span class="line"><span>  rightColor?: string;</span></span>
<span class="line"><span>  round?: boolean;</span></span>
<span class="line"><span>  circle?: boolean;</span></span>
<span class="line"><span>  colorBg?: string;</span></span>
<span class="line"><span>  textColor?: string;</span></span>
<span class="line"><span>  boxShadow?: string;</span></span>
<span class="line"><span>  width?: string;</span></span>
<span class="line"><span>  height?: string;</span></span>
<span class="line"><span>  paddingText?: string;</span></span>
<span class="line"><span>  tag?: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre></div>`,6))])}const E=l(c,[["render",i]]);export{_ as __pageData,E as default};
