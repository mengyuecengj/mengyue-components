import{_ as n,C as d,c as p,o as r,af as l,G as t}from"./chunks/framework.B2AMlDzG.js";const _=JSON.parse('{"title":"Slidebar","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/slidebar.md","filePath":"guide/mdGuide/slidebar.md"}'),i={name:"guide/mdGuide/slidebar.md"};function u(e,a,c,b,m,h){const o=d("MYSlidebar");return r(),p("div",null,[a[6]||(a[6]=l(`<h1 id="slidebar" tabindex="-1">Slidebar <a class="header-anchor" href="#slidebar" aria-label="Permalink to &quot;Slidebar&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>slidebar滑动条组件，用于用户通过拖动滑块来选择一个范围内的值。mengyue-components进行了封装并进行了vitest测试。<br> 可以使用<code>&lt;MYSlidebar&gt;&lt;/MYSlidebar&gt;</code>或者<code>&lt;MYSlidebar /&gt;</code>来实现一个滑动条</p><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><p>使用<code>v-model</code>绑定滑块的值。例如<code>ref</code>(sliderValue已经定义)绑定滑块的值：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,6)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[0]||(a[0]=s=>e.sliderValue=s)},null,8,["modelValue"]),a[7]||(a[7]=l(`<h2 id="自定义滑块颜色" tabindex="-1">自定义滑块颜色 <a class="header-anchor" href="#自定义滑块颜色" aria-label="Permalink to &quot;自定义滑块颜色&quot;">​</a></h2><p>使用<code>thumbColor</code>属性可以自定义滑块的颜色。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; thumbColor=&quot;#ff0000&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[1]||(a[1]=s=>e.sliderValue=s),thumbColor:"#ff0000"},null,8,["modelValue"]),a[8]||(a[8]=l(`<h2 id="自定义轨道颜色" tabindex="-1">自定义轨道颜色 <a class="header-anchor" href="#自定义轨道颜色" aria-label="Permalink to &quot;自定义轨道颜色&quot;">​</a></h2><p>使用<code>trackColor</code>属性可以自定义轨道的颜色。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; trackColor=&quot;#00ff00&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[2]||(a[2]=s=>e.sliderValue=s),trackColor:"#00ff00"},null,8,["modelValue"]),a[9]||(a[9]=l(`<h2 id="禁用状态" tabindex="-1">禁用状态 <a class="header-anchor" href="#禁用状态" aria-label="Permalink to &quot;禁用状态&quot;">​</a></h2><p>使用<code>disabled</code>属性可以禁用滑动条。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; disabled /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[3]||(a[3]=s=>e.sliderValue=s),disabled:""},null,8,["modelValue"]),a[10]||(a[10]=l(`<h2 id="隐藏数值" tabindex="-1">隐藏数值 <a class="header-anchor" href="#隐藏数值" aria-label="Permalink to &quot;隐藏数值&quot;">​</a></h2><p>使用<code>noNum</code>属性可以隐藏滑动条的数值显示。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; noNum /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[4]||(a[4]=s=>e.sliderValue=s),noNum:""},null,8,["modelValue"]),a[11]||(a[11]=l(`<h2 id="尺寸" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸" aria-label="Permalink to &quot;尺寸&quot;">​</a></h2><p>使用<code>size</code>属性可以自定义滑块的大小。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSlidebar v-model=&quot;sliderValue&quot; size=&quot;500px&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),t(o,{modelValue:e.sliderValue,"onUpdate:modelValue":a[5]||(a[5]=s=>e.sliderValue=s),size:"500px"},null,8,["modelValue"]),a[12]||(a[12]=l(`<h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>size</td><td>滑块大小</td><td>string</td><td>px/rem/em/%/动态绑定</td><td>—</td></tr><tr><td>thumbColor</td><td>滑块颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>trackColor</td><td>轨道颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>—</td><td><code>false</code></td></tr><tr><td>noNum</td><td>是否隐藏数值</td><td>boolean</td><td>—</td><td><code>false</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span style="color:#81A1C1;">type</span><span style="color:#8FBCBB;"> SlidebarProps</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  size</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> string</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  thumbColor</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> string</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  trackColor</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> string</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  disabled</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  noNum</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div>`,5))])}const V=n(i,[["render",u]]);export{_ as __pageData,V as default};
