import{p as o,_ as n,C as i,c as u,o as p,af as d,G as s}from"./chunks/framework.Dg2MLihl.js";o(!0);o(!0);o(!1);o(!0);o(!1);o(!0);o(!1);const g=JSON.parse('{"title":"Switch","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/switch.md","filePath":"guide/mdGuide/switch.md"}'),r={name:"guide/mdGuide/switch.md"};function c(a,e,m,v,h,q){const l=i("MYSwitch");return p(),u("div",null,[e[9]||(e[9]=d(`<h1 id="switch" tabindex="-1">Switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;Switch&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>switch开关，用于用户在两种状态之间切换。mengyue-components进行了封装并进行了vitest测试。<br> 可以使用<code>&lt;MYSwitch&gt;&lt;/MYSwitch&gt;</code>或者<code>&lt;MYSwitch /&gt;</code>来实现一个开关</p><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><p>使用v-model绑定开关的状态,例如这里已经有了value1<code>const value1 = ref(false)</code></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSwitch v-model=&quot;value1&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,6)),s(l,{modelValue:a.value1,"onUpdate:modelValue":e[0]||(e[0]=t=>a.value1=t)},null,8,["modelValue"]),e[10]||(e[10]=d(`<h2 id="带文本的switch" tabindex="-1">带文本的switch <a class="header-anchor" href="#带文本的switch" aria-label="Permalink to &quot;带文本的switch&quot;">​</a></h2><p>使用<code>value</code>和<code>text</code>可以定义开关的状态和开关的状态下的文本。例如这里已经有value2、value3<code>const value2 = ref(false)</code></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSwitch v-model=&quot;value2&quot; text=&quot;T&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),s(l,{modelValue:a.value2,"onUpdate:modelValue":e[1]||(e[1]=t=>a.value2=t),text:"T"},null,8,["modelValue"]),e[11]||(e[11]=d(`<h2 id="关于尺寸" tabindex="-1">关于尺寸 <a class="header-anchor" href="#关于尺寸" aria-label="Permalink to &quot;关于尺寸&quot;">​</a></h2><p>使用<code>size</code>定义尺寸，可以使用mengyue-components提供的尺寸例如: <code>medium</code>。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSwitch v-model=&quot;value1&quot; size=&quot;mini&quot; text=&quot;S&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value2&quot; size=&quot;supersmall&quot; text=&quot;S&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value3&quot; size=&quot;small&quot; text=&quot;M&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value4&quot; size=&quot;medium&quot; text=&quot;L&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value5&quot; size=&quot;large&quot; text=&quot;XL&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value6&quot; size=&quot;biglarge&quot; text=&quot;XL&quot; /&gt;</span></span>
<span class="line"><span>&lt;MYSwitch v-model=&quot;value7&quot; size=&quot;superlarge&quot; text=&quot;XL&quot; /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div><p>运行后的效果，从上往下依次为:<br><code>mini</code>/<code>supersmall</code>/<code>small</code>/<code>medium</code>/<code>large</code>/<code>biglarge</code>/<code>superlarge</code></p>`,4)),s(l,{modelValue:a.value1,"onUpdate:modelValue":e[2]||(e[2]=t=>a.value1=t),size:"mini",text:"S"},null,8,["modelValue"]),s(l,{modelValue:a.value2,"onUpdate:modelValue":e[3]||(e[3]=t=>a.value2=t),size:"supersmall",text:"S"},null,8,["modelValue"]),s(l,{modelValue:a.value3,"onUpdate:modelValue":e[4]||(e[4]=t=>a.value3=t),size:"small",text:"M"},null,8,["modelValue"]),s(l,{modelValue:a.value4,"onUpdate:modelValue":e[5]||(e[5]=t=>a.value4=t),size:"medium",text:"L"},null,8,["modelValue"]),s(l,{modelValue:a.value5,"onUpdate:modelValue":e[6]||(e[6]=t=>a.value5=t),size:"large",text:"XL"},null,8,["modelValue"]),s(l,{modelValue:a.value6,"onUpdate:modelValue":e[7]||(e[7]=t=>a.value6=t),size:"biglarge",text:"XL"},null,8,["modelValue"]),s(l,{modelValue:a.value7,"onUpdate:modelValue":e[8]||(e[8]=t=>a.value7=t),size:"superlarge",text:"XL"},null,8,["modelValue"]),e[12]||(e[12]=d(`<h2 id="关于禁用状态" tabindex="-1">关于禁用状态 <a class="header-anchor" href="#关于禁用状态" aria-label="Permalink to &quot;关于禁用状态&quot;">​</a></h2><h3 id="disabled" tabindex="-1">disabled <a class="header-anchor" href="#disabled" aria-label="Permalink to &quot;disabled&quot;">​</a></h3><p>使用<code>disabled</code>可以禁用开关。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYSwitch disabled /&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,4)),s(l,{disabled:""}),e[13]||(e[13]=d(`<h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>开关状态值</td><td>string</td><td>—</td><td></td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td><code>mini</code>/<code>supersmall</code>/<code>small</code>/<code>medium</code>/<code>large</code>/<code>biglarge</code>/<code>superlarge</code></td><td>—</td></tr><tr><td>text</td><td>文本</td><td>string</td><td>—</td><td><code>false</code></td></tr><tr><td>disabled</td><td>禁用</td><td>boolean</td><td>—</td><td><code>false</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>interface SwitchProps {</span></span>
<span class="line"><span>  value?: string;</span></span>
<span class="line"><span>  size?: string;</span></span>
<span class="line"><span>  text?: string;</span></span>
<span class="line"><span>  disabled?: boolean;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre></div>`,5))])}const f=n(r,[["render",c]]);export{g as __pageData,f as default};
