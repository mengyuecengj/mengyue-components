import{_ as r,C as o,c as u,o as _,af as l,G as e,w as a,a as n}from"./chunks/framework.D6WQP5md.js";const y=JSON.parse('{"title":"Text","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mdGuide/text.md","filePath":"guide/mdGuide/text.md"}'),c={name:"guide/mdGuide/text.md"};function T(g,t,x,m,f,b){const s=o("MYText"),p=o("MYCol"),d=o("MYBorder"),i=o("MYRow");return _(),u("div",null,[t[16]||(t[16]=l(`<h1 id="text" tabindex="-1">Text <a class="header-anchor" href="#text" aria-label="Permalink to &quot;Text&quot;">​</a></h1><h2 id="简易介绍" tabindex="-1">简易介绍 <a class="header-anchor" href="#简易介绍" aria-label="Permalink to &quot;简易介绍&quot;">​</a></h2><p>text 文本组件，用于显示文本内容，支持多种样式和尺寸。mengyue-components 进行了封装并进行了 vitest 测试。<br> 可以使用 <code>&lt;MYText&gt;&lt;/MYText&gt;</code> 或者 <code>&lt;MYText /&gt;</code> 来实现一个文本组件。</p><h2 id="关于颜色的使用" tabindex="-1">关于颜色的使用 <a class="header-anchor" href="#关于颜色的使用" aria-label="Permalink to &quot;关于颜色的使用&quot;">​</a></h2><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p>在 <code>MYText</code> 中使用 <code>type</code> 可以实现文本的颜色定义，这些颜色是 mengyue-components 提供的基本颜色定义。 例如使用 type 完成下面的颜色定义，如果不写 type 默认是黑色文本：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText&gt;Default 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText type=&quot;primary&quot;&gt;primary 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText type=&quot;success&quot;&gt;Success 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText type=&quot;warning&quot;&gt;Warning 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText type=&quot;danger&quot;&gt;Danger 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText type=&quot;info&quot;&gt;Info 文本&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div><p>运行后的效果</p>`,8)),e(d,{Border:"2px solid #8a8e96ff",height:"100px",center:"",paddingText:"10px"},{default:a(()=>[e(i,{gutter:16},{default:a(()=>[e(p,{span:8},{default:a(()=>[e(s,{plain:""},{default:a(()=>t[0]||(t[0]=[n("Default文本",-1)])),_:1,__:[0]})]),_:1}),e(p,{span:8},{default:a(()=>[e(s,{type:"primary",plain:""},{default:a(()=>t[1]||(t[1]=[n("primary文本",-1)])),_:1,__:[1]})]),_:1}),e(p,{span:8},{default:a(()=>[e(s,{type:"success",plain:""},{default:a(()=>t[2]||(t[2]=[n("Success文本",-1)])),_:1,__:[2]})]),_:1}),e(d,{borderColor:"transparent",paddingText:"10px"}),e(p,{span:8},{default:a(()=>[e(s,{type:"warning",plain:""},{default:a(()=>t[3]||(t[3]=[n("Warning文本",-1)])),_:1,__:[3]})]),_:1}),e(p,{span:8},{default:a(()=>[e(s,{type:"danger",plain:""},{default:a(()=>t[4]||(t[4]=[n("anger文本",-1)])),_:1,__:[4]})]),_:1}),e(p,{span:8},{default:a(()=>[e(s,{type:"info",plain:""},{default:a(()=>t[5]||(t[5]=[n("Info文本",-1)])),_:1,__:[5]})]),_:1})]),_:1})]),_:1}),t[17]||(t[17]=l(`<h3 id="自定义颜色" tabindex="-1">自定义颜色 <a class="header-anchor" href="#自定义颜色" aria-label="Permalink to &quot;自定义颜色&quot;">​</a></h3><p>如果默认颜色不满足需求，还可以自定义颜色，使用 <code>color</code> 属性自定义文本颜色。 例如这里使用红色文本：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText Tecolor=&quot;#ff0000&quot;&gt;自定义红色文本&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,3)),e(s,{Tecolor:"#ff0000"},{default:a(()=>t[6]||(t[6]=[n("自定义红色文本",-1)])),_:1,__:[6]}),t[18]||(t[18]=l(`<p>也可以使用单词来自定义文本颜色</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText Tecolor=&quot;pink&quot;&gt;自定义粉色文本&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),e(s,{Tecolor:"pink"},{default:a(()=>t[7]||(t[7]=[n("自定义粉色文本",-1)])),_:1,__:[7]}),t[19]||(t[19]=l(`<h2 id="关于尺寸" tabindex="-1">关于尺寸 <a class="header-anchor" href="#关于尺寸" aria-label="Permalink to &quot;关于尺寸&quot;">​</a></h2><h3 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size&quot;">​</a></h3><p>使用 <code>size</code> 属性可以调整文本大小。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText size=&quot;small&quot;&gt;small 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText size=&quot;medium&quot;&gt;medium 文本&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText size=&quot;large&quot;&gt;large 文本&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,4)),e(s,{size:"small"},{default:a(()=>t[8]||(t[8]=[n("small 文本",-1)])),_:1,__:[8]}),e(s,{size:"medium"},{default:a(()=>t[9]||(t[9]=[n("medium 文本",-1)])),_:1,__:[9]}),e(s,{size:"large"},{default:a(()=>t[10]||(t[10]=[n("large 文本",-1)])),_:1,__:[10]}),t[20]||(t[20]=l(`<p>当然也可以自定义文本大小,例如:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText size=&quot;20px&quot;&gt;自定义文本40px&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText :size=&quot;20&quot;&gt;自定义文本:40&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText size=&quot;5rem&quot;&gt;自定义文本5rem&lt;/MYText&gt;</span></span>
<span class="line"><span>&lt;MYText size=&quot;20em&quot;&gt;自定义文本5em&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),e(s,{size:"20px"},{default:a(()=>t[11]||(t[11]=[n("自定义文本40px",-1)])),_:1,__:[11]}),e(s,{size:20},{default:a(()=>t[12]||(t[12]=[n("自定义文本:40",-1)])),_:1,__:[12]}),e(s,{size:"5rem"},{default:a(()=>t[13]||(t[13]=[n("自定义文本5rem",-1)])),_:1,__:[13]}),e(s,{size:"5em"},{default:a(()=>t[14]||(t[14]=[n("自定义文本5em",-1)])),_:1,__:[14]}),t[21]||(t[21]=l(`<p>组合使用:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>&lt;MYText size=&quot;medium&quot; Tecolor=&quot;blue&quot;&gt;组合使用medium和blue&lt;/MYText&gt;</span></span>
<span class="line"><span></span></span></code></pre></div>`,2)),e(s,{size:"medium",Tecolor:"blue"},{default:a(()=>t[15]||(t[15]=[n("组合使用medium和blue",-1)])),_:1,__:[15]}),t[22]||(t[22]=l(`<h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>文本类型</td><td>string</td><td><code>primary</code>/<code>success</code>/<code>warning</code>/<code>danger</code>/<code>info</code>/自定义</td><td>—</td></tr><tr><td>size</td><td>文本尺寸</td><td>string</td><td><code>small</code>/<code>medium</code>/<code>large</code>/number/自定义</td><td><code>medium</code></td></tr><tr><td>color</td><td>文本颜色</td><td>string</td><td>支持16进制颜色或单词颜色</td><td>—</td></tr><tr><td>tag</td><td>渲染标签</td><td>string</td><td>支持所有 HTML 标签</td><td><code>span</code></td></tr></tbody></table><h3 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki nord" style="color:#d8dee9ff;" tabindex="0"><code><span class="line"><span>interface TextProps {</span></span>
<span class="line"><span>  type?: string;</span></span>
<span class="line"><span>  size?: string;</span></span>
<span class="line"><span>  color?: string;</span></span>
<span class="line"><span>  tag?: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre></div>`,5))])}const v=r(c,[["render",T]]);export{y as __pageData,v as default};
