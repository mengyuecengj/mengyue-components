import{_ as r,c as e,o as t,ah as n}from"./chunks/framework.CnxbpgSG.js";const p=JSON.parse('{"title":"概览","description":"","frontmatter":{"layout":"doc","title":"概览"},"headers":[],"relativePath":"guide/overView.md","filePath":"guide/overView.md"}'),a={name:"guide/overView.md"};function l(i,o,s,g,d,c){return t(),e("div",null,[...o[0]||(o[0]=[n('<h1 id="🌈-概览" tabindex="-1">🌈 概览 <a class="header-anchor" href="#🌈-概览" aria-label="Permalink to “🌈 概览”">​</a></h1><blockquote><p><strong>mengyue-components</strong> 并非一份传统的组件 API 文档。此处的唯一目的，是搭建一座桥梁 —— 连接“孤立组件说明书”与“真实业务开发”之间的 <strong>实践之桥</strong>。</p></blockquote><p>    在日常前端开发中，我们常常陷入一种困境：熟读组件文档，却在面对复杂场景时无从下手。<br> 本部分内容正是为此而生 —— 把重点从 <strong>“组件是什么”</strong> 转向 <strong>“如何用组件做什么”</strong>。<br> 通过真实业务中的场景、通用模式与最佳实践，展示如何将分散的组件像积木一样灵活组合，构建高质量的界面。</p><h2 id="🎯-内容定位" tabindex="-1">🎯 内容定位 <a class="header-anchor" href="#🎯-内容定位" aria-label="Permalink to “🎯 内容定位”">​</a></h2><p>    本章节的核心思想是 <strong>场景驱动</strong> 与 <strong>组合创新</strong>。<br> 这里不会重复基础组件属性，而是基于对组件的熟悉，引导你从更高的抽象层次去思考如何组织它们。</p><p>每一篇文章、每一个案例，都力求具备实战价值。<br> 你将看到的不是孤立的组件示例，而是<strong>包含逻辑、交互与经验总结</strong>的完整方案。</p><p><strong>重点关注：</strong></p><ul><li>🧩 <strong>组件的搭配</strong>：如何选择正确的组件组合以实现特定功能。</li><li>⚙️ <strong>逻辑的封装</strong>：如何抽取复杂逻辑为可复用的 Composition Function 或 Hook。</li><li>🔄 <strong>数据的流转</strong>：数据如何在表单、列表、弹窗等组件之间安全高效地传递。</li><li>💡 <strong>体验的优化</strong>：如何利用组件 API 打造流畅友好的用户体验。</li><li>🚧 <strong>边界的处理</strong>：如何优雅地处理加载、空状态、错误等边界场景。</li></ul><blockquote><p>🧰 总之，这里是一份“工具箱”与“思路集”，让你在面对复杂业务时快速找到优雅且可靠的实现方案。</p></blockquote><h2 id="🧭-适用场景" tabindex="-1">🧭 适用场景 <a class="header-anchor" href="#🧭-适用场景" aria-label="Permalink to “🧭 适用场景”">​</a></h2><p>    本部分将详细阐述中后台系统与前端应用中最关键的组件应用场景，如：<br><strong>表单组件、Table 组件、弹窗组件、菜单导航等</strong>。</p><h2 id="🗂️-menu-菜单" tabindex="-1">🗂️ Menu 菜单 <a class="header-anchor" href="#🗂️-menu-菜单" aria-label="Permalink to “🗂️ Menu 菜单”">​</a></h2><p>几乎所有 Web 应用都离不开导航。我们将深入探讨如何用 <code>Menu</code> 及相关组件构建完整布局：</p><ul><li>📌 <strong>动态侧边栏导航</strong>：根据路由配置或用户权限动态生成菜单项，并管理高亮状态。</li><li>🌳 <strong>嵌套菜单与收缩展开</strong>：支持多级菜单与手风琴式展开。</li><li>🔗 <strong>路由集成</strong>：实现菜单与路由状态同步。</li><li>📱 <strong>响应式适配</strong>：在小屏下转化为抽屉式导航，与顶栏联动。</li></ul><h2 id="📝-form-表单" tabindex="-1">📝 Form 表单 <a class="header-anchor" href="#📝-form-表单" aria-label="Permalink to “📝 Form 表单”">​</a></h2><p>表单是用户与系统对话的窗口，其复杂性远超想象。我们将系统性地梳理表单开发的要点：</p><ul><li>🧱 <strong>复杂结构表单的构建</strong>：利用布局组件与 <code>Form.Item</code> 构建分组与条件显示表单。</li><li>🧩 <strong>表单验证实践</strong>：编写同步/异步验证规则，优雅展示错误信息。</li><li>⚡ <strong>动态表单的掌控</strong>：支持动态增删项与条件切换，保证数据与验证同步。</li><li>🔁 <strong>数据联动与重置</strong>：探讨字段间联动与表单状态重置的正确方式。</li></ul><h2 id="💬-弹层与反馈" tabindex="-1">💬 弹层与反馈 <a class="header-anchor" href="#💬-弹层与反馈" aria-label="Permalink to “💬 弹层与反馈”">​</a></h2><p>弹层用于展示临时内容或反馈信息，是现代 Web 交互的重要部分。</p><ul><li>🧾 <strong>Dialog 与 Form 的组合</strong>：弹窗中表单的提交、验证与关闭管理。</li><li>🧠 <strong>全局弹层管理</strong>：统一管理多个弹窗/抽屉的堆叠与状态恢复。</li><li>📣 <strong>反馈信息集成</strong>：与 <code>Message</code>、<code>Notification</code> 协同展示操作结果。</li><li>🔄 <strong>数据回传与同步</strong>：关闭弹窗后将操作结果同步给父组件并触发表格刷新。</li></ul><h2 id="📊-table-表格" tabindex="-1">📊 Table 表格 <a class="header-anchor" href="#📊-table-表格" aria-label="Permalink to “📊 Table 表格”">​</a></h2><p>数据表格是信息密度最高的组件之一，其周边交互尤为复杂。</p><ul><li>🔁 <strong>表格与分页联动</strong>：结合 <code>Pagination</code> 实现前后端分页。</li><li>🧰 <strong>工具栏整合</strong>：集成搜索框、筛选器与操作按钮。</li><li>✏️ <strong>行内操作</strong>：在行内提供编辑、删除操作，与 Dialog/Form 形成 CRUD 闭环。</li><li>🌲 <strong>可展开行与树形数据</strong>：支持层级结构数据展示。</li></ul><h2 id="🧠-超越组件的组合式函数" tabindex="-1">🧠 超越组件的组合式函数 <a class="header-anchor" href="#🧠-超越组件的组合式函数" aria-label="Permalink to “🧠 超越组件的组合式函数”">​</a></h2><p>Vue 3 的 Composition API 让我们能抽离与组件相关的复杂逻辑，实现高层复用：</p><ul><li>🪄 <strong>封装通用模态框逻辑</strong>：<code>useModal</code> 统一管理弹窗可见性、加载状态与提交逻辑。</li><li>📡 <strong>封装数据获取逻辑</strong>：<code>useAsyncTable</code> 处理表格的数据加载、分页、筛选。</li><li>🌍 <strong>共享全局状态</strong>：利用 Pinia 或 Provide/Inject 共享主题、用户信息等跨层状态。</li></ul><h2 id="🧾-总结" tabindex="-1">🧾 总结 <a class="header-anchor" href="#🧾-总结" aria-label="Permalink to “🧾 总结”">​</a></h2><p>    本章节将持续更新，内容会随着新场景与组件演进不断丰富。<br> 希望通过这种 <strong>案例式讲解</strong>，为你提供一个新的视角：<br> 组件库不仅是 UI 元素集合，更是一个能被灵活组合、构建复杂应用的 <strong>强大工具箱</strong>。</p><blockquote><p>💡 <em>“组件不是终点，而是连接逻辑与界面的桥梁。”</em></p></blockquote>',29)])])}const b=r(a,[["render",l]]);export{p as __pageData,b as default};
